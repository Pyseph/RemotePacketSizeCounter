"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),f=r,k=p["".concat(l,".").concat(f)]||p[f]||m[f]||o;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:r,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},76647:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={},i="RemotePacketSizeCounter",c={type:"mdx",permalink:"/RemotePacketSizeCounter/",source:"@site/pages/index.md",title:"RemotePacketSizeCounter",description:"Calculates the size of remote packet data in bytes, given the packet data.",frontMatter:{}},l=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:2},{value:"Contributing",id:"contributing",level:2}],u={toc:l},s="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"remotepacketsizecounter"},"RemotePacketSizeCounter"),(0,r.kt)("p",null,"Calculates the size of remote packet data in bytes, given the packet data.\nUsed in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PysephWasntAvailable/PacketProfiler"},"https://github.com/PysephWasntAvailable/PacketProfiler"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install using Wally:\n",(0,r.kt)("a",{parentName:"p",href:"https://wally.run/package/pysephwasntavailable/remotepacketsizecounter"},"https://wally.run/package/pysephwasntavailable/remotepacketsizecounter")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local PacketSizeCounter = require(Packages.RemotePacketSizeCounter)\n\n-- RemoteOverhead describes the size of the remote overhead\nprint(PacketSizeCounter.RemoteOverhead)\n-- TypeOverhead describes the size of the overhead for a single data type\nprint(PacketSizeCounter.TypeOverhead)\n\n-- Use the GetDataByteSize function to get the size of a single argument from a remote\nPacketSizeCounter.GetDataByteSize(Value)\n\n-- Use the GetPacketSize function to get the size of all arguments from a remote\nPacketSizeCounter.GetPacketSize({\n    IgnoreRemoteOffset = true, -- Whether to ignore remote size overhead\n    PacketData = {...} -- Array of remote packet data, supports most types\n})\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'PacketSizeCounter.GetPacketSize({\n    IgnoreRemoteOffset = true,\n    PacketData = {1}\n}) -- 9\nPacketSizeCounter.GetPacketSize({\n    IgnoreRemoteOffset = true,\n    PacketData = {912038912098}\n}) -- 9\n\nPacketSizeCounter.GetPacketSize({\n    IgnoreRemoteOffset = true,\n    PacketData = {"Hello"}\n}) -- 8\nPacketSizeCounter.GetPacketSize({\n    IgnoreRemoteOffset = false,\n    PacketData = {"Hello"}\n}) -- 17\n\nPacketSizeCounter.GetPacketSize({\n    IgnoreRemoteOffset = true,\n    PacketData = {CFrame.new()}\n}) -- 14\nPacketSizeCounter.GetPacketSize({\n    IgnoreRemoteOffset = true,\n    PacketData = {CFrame.Angles(0, 10, 0)}\n}) -- 22\n')),(0,r.kt)("h2",{id:"contributing"},"Contributing"),(0,r.kt)("p",null,"Please see ","[CONTRIBUTING.md]"," for more information."))}p.isMDXComponent=!0}}]);